// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Product {
  id                     String                 @id @default(uuid())
  name                   String
  priceInCents           Int
  filePath               String
  imagePath              String
  description            String
  isAvailableForPurchase Boolean                @default(true)
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  orders                 Order[]
  downloadVerifications  DownloadVerification[]
  category               Category[]
}
model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
  services Service[]
}

model User {
  id           String        @id @default(cuid())
  name         String?
  email        String        @unique
  password     String
  appointments Appointment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Order Order[]
}

model Order {
  id               String   @id @default(uuid())
  pricePaidInCents Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  userId    String
  productId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Restrict)
}

model DownloadVerification {
  id        String   @id @default(uuid())
  expiresAt DateTime
  createdAt DateTime @default(now())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}



model Service {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  duration    Int
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model Appointment {
  id        String   @id @default(cuid())
  date      DateTime
  status    AppointmentStatus[]
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model AppointmentStatus {
  id String @id @default(cuid())
  pending Boolean
  confirmed Boolean
  cancelled Boolean
  completed Boolean
  Appointment Appointment[]
}


